local M = {
    mID = UIBase.GetID(),
	mName = 'UIMain',
	mFixedWidets = {
		{ mID = UIBase.GetID(), mName = 'UIFixed', mSortingOrderOffset = 1},
		{ mID = UIBase.GetID(), mName ='UIRight',mSortingOrderOffset = 1}
	},
}
UIMain = M
setmetatable(M, UIBase)

--整个生命周期只调用一次
function M:OnLoad()
--BINDING_CODE_BEGIN
	self.mButtonNormal = self:GetComponent(typeof(Button), 'Tween/SafeArea/@Button.mButtonNormal')
	self.mTextNormal = self:GetComponent(typeof(Text), 'Tween/SafeArea/@Button.mButtonNormal/@Text.mTextNormal')
	self.mButtonPop = self:GetComponent(typeof(Button), 'Tween/SafeArea/@Button.mButtonPop')
	self.mButtonWidget = self:GetComponent(typeof(Button), 'Tween/SafeArea/@Button.mButtonWidget')
	self.mText = self:GetComponent(typeof(Text), 'Tween/SafeArea/@Text.mText')
	self.mVerticalGridScrollView = self:GetComponent(typeof(VerticalScrollView), 'Tween/SafeArea/@VerticalScrollView.mVerticalGridScrollView')
	self.mButtonAdd = self:GetComponent(typeof(Button), 'Tween/SafeArea/@Button.mButtonAdd')
	self.mButtonRemove = self:GetComponent(typeof(Button), 'Tween/SafeArea/@Button.mButtonRemove')
	self.mVerticalScrollView = self:GetComponent(typeof(VerticalScrollView), 'Tween/SafeArea/@VerticalScrollView.mVerticalScrollView')
	self.mHorizontalScrollView = self:GetComponent(typeof(HorizontalScrollView), 'Tween/SafeArea/@HorizontalScrollView.mHorizontalScrollView')
	self.mTab = self:GetComponent(typeof(Tab), 'Tween/SafeArea/@Tab.mTab')
	self.mProgressBar = self:GetComponent(typeof(ProgressBar), 'Tween/SafeArea/@ProgressBar.mProgressBar')
	self.mTimer = self:GetComponent(typeof(Timer), 'Tween/SafeArea/@Timer.mTimer')
--BINDING_CODE_END
    self.mButtonNormal.onClick:AddListener(function() UIManager:Open(UINormal) end)
    self.mButtonPop.onClick:AddListener(function() UIManager:Open(UIPop) end)
	self.mButtonWidget.onClick:AddListener(function() UIManager:Open(UIWidget) end)
	
	self.mVerticalGridScrollView.onScrollItem:AddListener(self:OnGridScrollItem())
	self.mButtonAdd.onClick:AddListener(self:OnAddClick())
	self.mButtonRemove.onClick:AddListener(self:OnRemoveClick())

	self.mItemDic = {}

	self.mData = {21,34,5,672,23,5,21,6,124,52,6,72,13,64,234,657,42,62,21,34,5,672,23,5,21,6,124,52,6,72,13,64,234,657,42,62,21,34,5,672,23,5,21,6,124,52,6,72,13,64,234,657,42,62}
	self.mVerticalGridScrollView.totalCount = #self.mData
	self.mVerticalGridScrollView:Refill()

	self.mTab.onTabValueChanged:AddListener(self:OnTabValueChanged())
	self.mTab.onTabRegisterToggle:AddListener(self:OnTabRegisterToggle())
	self.mTab:RegisterToggle()

	local onValueChanged = function(progressBar, from) 
		--print("Value Change from:"..from .." to:"..progressBar.value)
	end
	self.mProgressBar:SetMinMax(0,100)
	self.mProgressBar:AddTrigger(0, function(progressBar,triggerAt) 
		--print("current:" ..tostring(triggerAt)) 
		self.mProgressBar.onValueChanged:RemoveListener(onValueChanged)
		self.mProgressBar:SetValue(100,4)
	end)
	self.mProgressBar:AddTrigger(100,function(progressBar,triggerAt) 
		--print("current:" ..tostring(triggerAt)) 
		
		self.mProgressBar:SetValue(0, 4) 
	end)
	self.mProgressBar:AddTrigger(60,function(progressBar,triggerAt)
		-- print("current:" ..tostring(triggerAt)) 
	end)
	self.mProgressBar.onValueChanged:AddListener(onValueChanged)

	self.mProgressBar:SetValue(100,4)

	self.mTimer:AddTrigger(30, function(timer, triggerAt)
		-- print("timer trigger at "..triggerAt)
	end)
	local text = self.mTimer:GetComponent(typeof(Text))
	self.mTimer.onTimerValueChanged:AddListener( function(timer, previous)
            
         if text~= nil then
             text.text = timer.value.."s"
         end
    end)
    self.mTimer:Begin(0, 30, 1, 1);

end

--整个生命周期只调用一次
function M:OnUnload()
	self.mItemDic = nil
end


--整个生命周期可能调用多次
function M:OnShow()
	print("OnShow")
end

--整个生命周期可能调用多次
function M:OnHide()
	
end

function M:OnAddClick()
	return function ()
		for i=1,10 do
			table.insert( self.mData, i )
		end
		local preCount = self.mVerticalGridScrollView.totalCount
		self.mVerticalGridScrollView.totalCount = #self.mData
		print(preCount.." "..self.mVerticalGridScrollView.totalCount)
		self.mVerticalGridScrollView:Refresh()
		
	end
end

function M:OnRemoveClick()
	return function()
		for i=1,10 do
			table.remove( self.mData, #self.mData )
		end
		self.mVerticalGridScrollView.totalCount = #self.mData
		self.mVerticalGridScrollView:Refresh()
	end
end
--列表实例
function M:OnGridScrollItem()

	return function(item, index) 
		if self.mItemDic[item] == nil then
			local itemWrap = {
				mIndex = index, --从0开始
				mData = nil,
				mTransform = item,
				mText = item:Find("Text"):GetComponent(typeof(Text)),

			}
			function itemWrap:Init()
				self.mTransform:GetComponent(typeof(Button)).onClick:AddListener(self:OnClick())		
			end
			function itemWrap:OnClick()
				return function () 
					print("Click Item:"..self.mIndex)
				end
			end

			function itemWrap:Refresh(index, data) 
				self.mIndex = index
				self.mData = data
				self.mText.text = "Item "..self.mIndex .." data:"..data
			end

			itemWrap:Init()

			self.mItemDic[item] = itemWrap	
		end
		self.mItemDic[item]:Refresh(index, self.mData[index + 1])

	end
end

--标签页注册
function M:OnTabRegisterToggle()
	return function(toggle, index)
		if index == 1 then
			toggle.isOn = true
		end
	end
end

--标签页状态改变
function M:OnTabValueChanged()
	return function(toggle, index)
		local image = toggle:GetComponent(typeof(Image))
		if toggle.isOn then
			image.color = Color.yellow
		else
			image.color = Color.white
		end
	end
end

function M:OnUpdate(deltaTime)

	--print("UIMain Update:"..deltaTime)
end

return M