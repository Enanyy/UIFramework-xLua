Application             = CS.UnityEngine.Application
GameObject              = CS.UnityEngine.GameObject
Transform               = CS.UnityEngine.Transform
Vector2                 = CS.UnityEngine.Vector2
Vector3                 = CS.UnityEngine.Vector3
Quaternion              = CS.UnityEngine.Quaternion
Camera                  = CS.UnityEngine.Camera
RectTransform           = CS.UnityEngine.RectTransform
Canvas                  = CS.UnityEngine.Canvas
Screen                  = CS.UnityEngine.Screen
Input                   = CS.UnityEngine.Input

Color                   = CS.UnityEngine.Color
Image                   = CS.UnityEngine.UI.Image
Button                  = CS.UnityEngine.UI.Button
Text                    = CS.UnityEngine.UI.Text
TextMeshProUGUI         = CS.TMPro.TextMeshProUGUI
Toggle                  = CS.UnityEngine.UI.Toggle
Slider                  = CS.UnityEngine.UI.Slider
Scrollbar               = CS.UnityEngine.UI.Scrollbar
Dropdown                = CS.UnityEngine.UI.Dropdown
InputField              = CS.UnityEngine.UI.InputField
ScrollRect              = CS.UnityEngine.UI.ScrollRect
CanvasScaler            = CS.UnityEngine.UI.CanvasScaler

HorizontalScrollView    = CS.UnityEngine.UI.HorizontalScrollView
VerticalScrollView      = CS.UnityEngine.UI.VerticalScrollView
ProgressBar             = CS.UnityEngine.UI.ProgressBar
Tab                     = CS.UnityEngine.UI.Tab
Timer					= CS.UnityEngine.UI.Timer

local renderMode        = CS.UnityEngine.RenderMode.ScreenSpaceCamera
local uiScaleMode       = CS.UnityEngine.UI.CanvasScaler.ScaleMode.ScaleWithScreenSize
local screenMatchMode   = CS.UnityEngine.UI.CanvasScaler.ScreenMatchMode.MatchWidthOrHeight


UIType = 
{
    Normal  = 0,    --0、普通界面,会加入到导航栈
    Widget  = 1,    --1、小组件，比如飘字或者子界面
}

UIStatus = {
    None            = 0, 
    Loading         = 1,     --正在加载中
    LoadDone        = 2,     --加载完成
}


UIBase = 
{
    mName                   = "",               --UI名字
    gameObject              = nil,              --gameObject
    mCanvas                 = nil,              --画布
    mStatus                 = UIStatus.None,    --加载状态
    mParent                 = nil,              --当前的父UI

    mType                   = UIType.Normal,    --UI类型
    mHideOther              = false,    --隐藏所有其他窗口,一般用在打开一个全屏界面，隐藏上一个来减少overdraw（场景摄像机也可以关闭）
    mFixedOrder             = 0,        --固定SortingOrder,只对Widget有效
    mWidgets                = nil,      --子界面
    mFixedWidets            = nil,      --配置的子界面，,配置方式填写其他UI名字，如:mFixedWidets = {
                                                                                            -- 	    { mName = 'UIFixed', mSortingOrderOffset = 1},
                                                                                            -- 	    { mName ='UIRight',mSortingOrderOffset = 1}
                                                                                            -- }
    mSortingOrderOffset     = 1,        --在父界面的SortingOrder基础上加上的数值，只对Widget有效

    mCloseDestroy           = true,     --关闭时Destroy资源
}
UIBase.__index = UIBase


function UIBase:AddWidget( widget)

    if  widget == nil then return end

    widget.mParent = self

    if self.mWidgets == nil then
        self.mWidgets = {}
    end

    local exsit = false
    for i,v in ipairs(self.mWidgets) do
        if type(v) == "string" then
            if v == widget.mName then
                exsit = true
                break
            end
        else
            if v.mName == widget.mName then
                exsit = true
                break
            end
        end
    end
    if exsit == false then
        table.insert(self.mWidgets, widget)
    end
end

function UIBase:Clear()
    self.mWidgets = nil
    self.gameObject = nil
    self.mCanvas = nil
    self.mStatus = UIStatus.None

     --置空非lua对象，比如Unity的对象
     for key, value in pairs(self) do
        if type(value)=="userdata" then
            self[key] = nil
        end
    end
end

----------------------用户接口Begin------------------------
--整个生命周期只调用一次
function UIBase:OnLoad()
    
end
--整个生命周期只调用一次
function UIBase:OnUnload()

end

--整个生命周期可能调用多次
function UIBase:OnShow()

end
--整个生命周期可能调用多次
function UIBase:OnHide()

end

--关闭自己,如:self:Close()
function UIBase:Close()
    UIManager:Close(self)
end
--获取组件
function UIBase:GetComponent(type,path)
    if self.gameObject == nil then
        return nil
    end
    --使用TryGetComponent 无论是真机还是Editor都无内存分配
    if path == nil then
        local result, component = self.gameObject:TryGetComponent(type)
        return component
    else
        local result, component = self.gameObject.transform:Find(path):TryGetComponent(type)
        return component
    end
end
----------------------用户接口End------------------------


UIManager =
{
    mUIDic          = {},       --存储所有ui的字典
    mUIStack        = {},       --Normal类型的UI导航栈，下标1为栈顶

    mInited         = false,    --是否初始化完毕
    mUIRoot         = nil,      --Root gameObject
    mCamera         = nil,      --UI camera
    mEventSystem    = nil,      -- Event System

    mOrderAddition  = 50,       --自动设置SortingOrder的间隔
    mLayer          = 5,        --显示层LayerMask.NameToLayer("UI")
    mLayerModel     = 6,        --UI模型层
    mLayerHide      = 7,        --隐藏层

    mLoader         = nil,      --加载函数
}

function UIManager:Init()

    if self.mInited  then
        return
    end

    self.mInited = true

    self.mUIRoot = GameObject("UIRoot")
    GameObject.DontDestroyOnLoad(self.mUIRoot)

    local camera = GameObject("Camera")
    camera.transform:SetParent(self.mUIRoot.transform)
    camera.layer = self.mLayer
    self.mCamera = camera:AddComponent(typeof(Camera))
    self.mCamera.clearFlags = CS.UnityEngine.CameraClearFlags.Depth
    self.mCamera.depth = 10
    self.mCamera.orthographic = false  --使用透视投影，这样UI模型的3D立体感更强
    -- self.mCamera.orthographicSize = 10
    self.mCamera.fieldOfView = 60
    self.mCamera.cullingMask = 2^self.mLayer 

    local eventsystem = GameObject("EventSystem")
    eventsystem.transform:SetParent(self.mUIRoot.transform)
    eventsystem.layer = self.mLayer
    self.mEventSystem = eventsystem:AddComponent(typeof(CS.UnityEngine.EventSystems.EventSystem))
    self.mEventSystem.sendNavigationEvents = true
    self.mEventSystem.pixelDragThreshold = 5

    eventsystem:AddComponent(typeof(CS.UnityEngine.EventSystems.StandaloneInputModule))
    

end

function UIManager:SetTouch(touchable)
    if self.mEventSystem then
        self.mEventSystem.enabled = touchable
    end
end
--设置加载函数
function UIManager:SetLoader(func)
    self.mLoader = func
end

---打开一个UI
function UIManager:Open(ui, widget, callback)

    self:Init()

    if self.mLoader == nil then
        error("mLoader function is nil")
        if callback ~= nil then
            callback()
        end
        return 
    end

    if type(ui) == "string" then
        ui = self:Get(ui)
    end

    if ui == nil then
        if callback ~= nil then
            callback()
        end
        return 
    end

    if type(widget) == "string" then
        widget = self:Get(widget)
    end

   

    if widget ~= nil then
        ui:AddWidget(widget)
    end

    --禁用点击,防止重复点击打开界面
    self:SetTouch(false)

    if self.mUIDic[ui.mName] == nil then
        self.mUIDic[ui.mName] = ui
    end


    if ui.gameObject == nil then

        if ui.mStatus == UIStatus.Loading  then
            return
        end
        ui.mStatus = UIStatus.Loading

        self.mLoader(ui.mName,function(obj) 
        
            if ui.mStatus == UIStatus.None then
                return
            end

            local go = GameObject.Instantiate(obj)
            go.transform:SetParent(self.mUIRoot.transform)
            self:SetLayer(go,self.mLayerHide) --先隐藏，从而触发OnShow
    
            ui.gameObject = go
            ui.mCanvas = ui:GetComponent(typeof(Canvas))
            ui.mCanvas.renderMode = renderMode
            ui.mCanvas.worldCamera = self.mCamera
            ui.mCanvas.sortingLayerName = "UI"
        
            local scaler = ui:GetComponent(typeof(CanvasScaler))
            scaler.scaleFactor = 1
            scaler.uiScaleMode = uiScaleMode
            scaler.screenMatchMode = screenMatchMode
            scaler.referenceResolution = Vector2(1920, 1080)
            scaler.referencePixelsPerUnit = 100
    
            ui.mStatus = UIStatus.LoadDone

            ui:OnLoad()
        
            self:Push(ui)

            self:SetActive(ui,true)
            self:SetTouch(true)

            if callback ~= nil then
                callback()
            end
        end)

    else 

        self:Push(ui)

        self:SetActive(ui,true)
        self:SetTouch(true)

        if callback ~= nil then
            callback()
        end
    end

end

function UIManager:Push(ui)
    if ui == nil then return end

    if ui.mType == UIType.Normal then

        local nav = {
            mUI = ui,
            mHideList  = nil,
        }

        if ui.mHideOther then
            for k,v in pairs(self.mUIDic) do
                if v ~= ui and  self:IsActive(v) and v.mParent == nil then

                    if nav.mHideList == nil then
                        nav.mHideList = {}
                    end

                    table.insert( nav.mHideList, v)

                    self:SetActive(v,false)
                end
            end
            if nav.mHideList ~= nil then
                table.sort( nav.mHideList, function(a, b)
        
                    return  a.mCanvas.sortingOrder > b.mCanvas.sortingOrder

                end )
            end
        end
        --新打开的加到栈顶
        table.insert( self.mUIStack, 1, nav)
    end
end

function UIManager:Get(name)
    return require(name)
end

function UIManager:SetLayer(go,layer)
    if go and go.layer ~= layer then
        go.layer = layer
        local transforms = go:GetComponentsInChildren(typeof(Transform))
        for i = 0, transforms.Length - 1 do
            local child = transforms[i].gameObject
            if child.layer ~= self.mLayerModel  then
                child.layer = layer
            end
        end     
    end
end



--设置ui隐藏或者显示
function UIManager:SetActive(ui,active)

    if ui == nil then return end

    if active then 
        self:SetSortOrder(ui)
        if self:IsActive(ui) == false then
            self:SetLayer(ui.gameObject, self.mLayer)
            ui:OnShow()
        end
    else
        ui.mCanvas.sortingOrder = 0

        if self:IsActive(ui) then
            self:SetLayer(ui.gameObject, self.mLayerHide)
            ui:OnHide()   
        end
    end
    self:SetWidgetActive(ui,active) 
end

--判断ui是否显示中
function UIManager:IsActive(ui)

    if ui == nil or ui.gameObject == nil then return false end

    return ui.gameObject.layer == self.mLayer
end

function UIManager:SetWidgetActive(ui, active)

    if ui == nil then return end

    if ui.mFixedWidets ~=nil then
        for i, value in ipairs(ui.mFixedWidets) do
            local widget = self:Get(value.mName)
            if widget ~= nil then

                widget.mSortingOrderOffset = value.mSortingOrderOffset

                ui:AddWidget(widget)
            end

        end
    end
    if ui.mWidgets == nil then
        return
    end

    for i,widget in ipairs(ui.mWidgets) do

        if widget and widget.mType == UIType.Widget then
            if active then
                if widget.mStatus == UIStatus.None then
                    self:Open(widget, nil)
                elseif widget.mStatus == UIStatus.LoadDone  then
                    self:SetActive(widget,active)
                end
            else
                if widget.mStatus == UIStatus.LoadDone then
                    self:SetActive(widget,active)
                end
            end
        else
            error(widget.mName.. " type is "..widget.mType.." ui="..ui.mName)
        end
    end
end

function UIManager:SetSortOrder(ui)

    if ui == nil or ui.mCanvas == nil then return end

    if ui.mType == UIType.Widget and ui.mFixedOrder ~= 0 then    
        ui.mCanvas.sortingOrder = ui.mFixedOrder
    else
        if ui.mType == UIType.Widget and ui.mParent ~= nil then
            ui.mCanvas.sortingOrder = ui.mParent.mCanvas.sortingOrder + ui.mSortingOrderOffset
        else
            local minOrder = - 9999
            local maxOrder = minOrder
            for k,v in pairs(self.mUIDic) do
                if v ~= nil and v ~= ui and v.mCanvas ~= nil and v.mFixedOrder == 0 and v.mParent == nil  then   
                    if maxOrder == minOrder or  v.mCanvas.sortingOrder > maxOrder then 
                        maxOrder = v.mCanvas.sortingOrder
                    end
                end
            end

            if maxOrder == minOrder then
                maxOrder = 0
            else
                maxOrder = maxOrder + self.mOrderAddition
            end
            ui.mCanvas.sortingOrder = maxOrder
        end
    end
end

--
-- 关闭所有
--
function UIManager:CloseAll()
    for k,v in pairs(self.mUIDic) do
       self:Destroy(v)
    end
    self.mUIDic = {}
    self.mUIStack = {}
end
--
--关闭所有ui以外的所有界面，如果ui没打开则打开
--
function UIManager:CloseAllAndOpen(ui, widget, callback)
    if type(ui) == "string" then
        ui = self:Get(ui)
    end
    if ui == nil then
        return
    end
  
    for k,v in pairs(self.mUIDic) do
        local close = true

        if v ~= nil and v == ui then
            close = false
        else
            if v.mType == UIType.Widget then
                for i,w in ipairs(ui.mWidgets) do
                    if w == v.mName then
                        close = false
                        break
                    end
                end
            end
        end
        
        if close and v ~= nil then
           self:Destroy(v)
        end
    end

    self.mUIStack = {}
    if ui ~= nil  then
        self:Open(ui, widget, callback)
    end

end

---调用每个UI自己的Close
function UIManager:Close(ui)
    if type(ui) == "string" then
        ui = self:Get(ui)
    end

    if ui == nil then
        return
    end
    if ui.mType == UIType.Normal  then

        local current, index = table.find(self.mUIStack,function (nav) return nav.mUI == ui end)

        if current then
           
            local previous = nil
            local previousIndex = index + 1
            if previousIndex <= #self.mUIStack then
               previous = self.mUIStack[previousIndex] 
            end
            table.remove(self.mUIStack, index)

            local contains = table.exists(self.mUIStack,function (nav) return nav.mUI == ui end) 

            if contains == false then
                self:Destroy(ui)          
            else
                self:SetActive(ui,false)
            end

            if current ~= nil and current.mHideList ~= nil then
               
                for i,v in ipairs(current.mHideList) do
                    self:SetActive(v, true)
                end
            end

            if previous ~= nil then
                if previous.mUI.mHideOther == false and previousIndex <= #self.mUIStack then
                    local previousPrevious = self.mUIStack[previousIndex]
                    self:SetActive(previousPrevious.mUI,true)
                end
                self:SetActive(previous.mUI,true)
            end

        else
            self:Destroy(ui)
        end     
    else
        self:Destroy(ui)
    end
end

function UIManager:Destroy(ui)

    if ui == nil then return end

    self:SetActive(ui,false)
    --标记为Destroy才销毁
    print("Destroy:"..ui.mName .." ".. tostring( ui.mCloseDestroy))
    if ui.mCloseDestroy then

        self.mUIDic[ui.mName] = nil

        ui:OnUnload()   

        if ui.mWidgets ~= nil then
            for i, widget in ipairs(ui.mWidgets) do
                self:Destroy(widget)
            end
        end
         
        if ui.gameObject then
            GameObject.Destroy(ui.gameObject)
        end
       
        ui:Clear()
    end
end

function UIManager:Update( deltaTime )
   for k,v in pairs(self.mUIDic) do
        if self:IsActive(v) then
            local update = v["OnUpdate"]
            if update then
                update(v, deltaTime)
            end
        end
   end
end


return UIManager

